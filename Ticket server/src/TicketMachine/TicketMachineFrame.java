package TicketMachine;

import CentralServer.Attraction;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Map;

public class TicketMachineFrame extends JFrame {
    private JTable table1;
    private JPanel ticketMachinePanel;
    private JButton buyTicketButton;
    private JButton refreshButton;
    private TicketMachineConnectionHandler handler;
    private ArrayList tableData;

    public TicketMachineFrame(String machineId) {
        handler = new TicketMachineConnectionHandler(machineId);

        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setContentPane(this.ticketMachinePanel);
        this.pack();
        this.setVisible(true);
        refreshTable();

        refreshButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                refreshTable();
            }
        });

        buyTicketButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String chosenAttractionId = (String) table1.getValueAt(table1.getSelectedRow(), 1);
                if (!handler.sendBuyTicketRequest(chosenAttractionId)) {
                    new Popup();
                }
                refreshTable();
            }
        });
    }

    public void refreshTable() {
        this.tableData = new ArrayList();
        ArrayList element;
        Integer ticketsLeft;
        for (Map.Entry<String, Attraction> entry : this.handler.sendGetOffersRequest().entrySet()) {
            ticketsLeft = 0;
            for (Map.Entry<Integer, Boolean> entry1 : entry.getValue().getTicketsMap().entrySet()) {
                if (entry1.getValue()) {
                    ticketsLeft++;
                }
            }
            element = new ArrayList();
            element.add(entry.getValue().getName());
            element.add(entry.getKey());
            element.add(String.valueOf(entry.getValue().getTicketsMap().size()));
            element.add(String.valueOf(ticketsLeft));
            tableData.add(element);
        }

        TableModel dataModel = new AbstractTableModel() {
            String columnNames[] = {"Atrakcja", "ID", "DostÄ™pne miejsca"};


            @Override
            public String getColumnName(int col) {
                return columnNames[col];
            }

            @Override
            public int getRowCount() {
                return tableData.size();
            }

            @Override
            public int getColumnCount() {

                return 3;
            }

            @Override
            public Object getValueAt(int row, int col) {
                ArrayList list = (ArrayList) tableData.get(row);


                switch (col) {
                    case 0 -> {
                        return list.get(0);
                    }
                    case 1 -> {
                        return list.get(1);
                    }
                    case 2 -> {
                        return list.get(3) + "/" + list.get(2);
                    }
                    default -> {
                        return "";
                    }
                }
            }
        };
        dataModel.addTableModelListener(new TableModelListener() {

            @Override
            public void tableChanged(TableModelEvent e) {

            }
        });
        this.table1.setModel(dataModel);

    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        ticketMachinePanel = new JPanel();
        ticketMachinePanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        ticketMachinePanel.add(scrollPane1, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        table1 = new JTable();
        scrollPane1.setViewportView(table1);
        buyTicketButton = new JButton();
        buyTicketButton.setText("Buy ticket");
        ticketMachinePanel.add(buyTicketButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        refreshButton = new JButton();
        refreshButton.setText("Refresh");
        ticketMachinePanel.add(refreshButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return ticketMachinePanel;
    }

}
